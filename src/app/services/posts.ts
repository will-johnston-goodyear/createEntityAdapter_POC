import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
import { normalize, schema } from 'normalizr';
import { normalizePostsResponse } from '../utils';
import { Post, NormalizedPostsState } from '../sharedTypes'

/*
	postsApi

	RTKQuery `createApi` instance for fetching `posts`. 
*/
export const postsApi = createApi({
	reducerPath: 'postsApi',
	baseQuery: fetchBaseQuery({ baseUrl: 'http:localhost:3000/' }),
	endpoints: (builder) => ({
		getPosts: builder.query<NormalizedPostsState, null>({
			/*
			The `query` prop

			The return ('string') is passed to `baseQuery` and is used to target the correct endpoint. 
			
			The `query` prop should not be confused with the optional `queryFn` prop, which by-passes `baseQuery` 
			*/
			query: () => 'posts',
			/*
				`transformResponse` catches the return of `getPosts.fulfilled`, a method generated by `createApi`. Before sending the result to cache we can "catch" it here and transform the values.
			*/
			transformResponse: (response: { posts: Post[] }): NormalizedPostsState => {
				return normalizePostsResponse(response);
			},
		}),
	}) 
})

export const { useGetPostsQuery } = postsApi;